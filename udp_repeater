#!/bin/env ruby

# encoding: ASCII-8BIT

Encoding.default_external = Encoding::ASCII_8BIT
Encoding.default_internal = Encoding::ASCII_8BIT

begin
    require 'Yk/debug2'
rescue LoadError
    require 'tz/debug2'
end
require 'socket'
require 'ipaddr'
require 'securerandom'
require 'digest'

class String
    def md5
        Digest::MD5.hexdigest self
    end
end

STDERR.puts "あ".encoding
STDERR.puts "あ".size.inspect


DEBUG = true
#p > "res"

# UDP repeater
sport = nil
cport = nil
chost = nil
rport = nil
rhost = nil
lport = nil

b = binding
begin
    if ARGV.delete "--server"
        ARGV.each do |arg|
            case arg
            when /^\d+$/
                if !sport
                    sport = arg.to_i
                else
                    cport = arg.to_i
                    chost = "127.0.0.1"
                end
            when /^([A-Aa-z0-9\.\-]+):(\d+)$/
                chost = $1
                cport = $2
            else
                raise ArgumentError.new("Invalid argument")
            end
        end
    else
        ARGV.each do |arg|
            case arg
            when /^\d+$/
                lport = arg.to_i
            when /^([A-Aa-z0-9\.\-]+):(\d+)$/
                rhost = $1
                rport = $2
            else
                raise ArgumentError.new("Invalid argument")
            end
        end
        if !lport || !rport || !rhost
            raise ArgumentError.new("Invalid argument")
        end
    end
rescue ArgumentError
    STDERR.puts <<END
Usage: udp_repeater <local_port> <remote_host:remote_port>
       udp_repeater --server <local_port> <connection_host:connection_port>
END
    exit 1
end

SPORT = sport
CPORT = cport
CHOST = chost
RPORT = rport
RHOST = rhost
LPORT = lport

require 'fileutils'

if LPORT
    id = IO.read "#{ENV['HOME']}/.udp_repeater/id" rescue (
        FileUtils.mkdir_p "#{ENV['HOME']}/.udp_repeater"
        IO.write "#{ENV['HOME']}/.udp_repeater/id", id = SecureRandom.random_bytes(32);
        id
    )
end
ID = id

repeat = nil
begin
    repeat = IO.read("#{ENV['HOME']}/.udp_repeater/repeat").to_i
    if repeat < 1
        raise ArgumentError.new("Invalid repeat value")
    end
rescue
    FileUtils.mkdir_p "#{ENV['HOME']}/.udp_repeater"
    IO.write "#{ENV['HOME']}/.udp_repeater/repeat", "7";
    repeat = 7
end
REPEAT = repeat


Counter = Hash.new { |h, k| h[k] = 0 }
PacketSz = 1024


class PacketQueue
    Data = Hash.new
    def self.emerge addr, port
        Data[[addr, port]] ||= new
    end
    def initialize
        @chunkManagers = Hash.new
        @queue = Array.new
    end
    def getChunkManager packet_no
        if @first && (packet_no < @first - 100 ||  @first + @queue.size + 100 < packet_no)
            @queue.clear
            @first = nil
        end
        @first ||= packet_no
        pos = packet_no - @first
        if pos < 0
            return nil
        elsif pos > @queue.size
            (pos - @queue.size).times do
                @queue.push ChunkManager.new
            end
        end
        @queue[pos] ||= ChunkManager.new

    end
    def flush
        while !@queue.empty? && @queue.first.ready?
            @queue.shift.flush do |tdata|
                yield tdata
                @first += 1
            end
        end
    end
end

MaxChunkSize = 5
Timeout = 5

class ChunkManager
    Data = Hash.new
    def self.register addr, port, packet_no, chunk_no, data_size, data
        pq = PacketQueue.emerge addr, port
        cm = pq.getChunkManager packet_no
        if cm
            cm.addChunk chunk_no, data_size, data
            pq.flush do |tdata|
                yield tdata
            end
        end
    end
    def initialize
        @time = Time.now
        @chunks = Array.new
        @size = 0
    end
    def addChunk chunk_no, data_size, data
        @chunks[chunk_no] && return
        @chunks[chunk_no] = data
        @size += data.bytesize
        if @size >= data_size
            @data_ready = true
        end
    end
    def flush
        if @data_ready
            d = @chunks.join rescue nil
            yield d if d
        end
    end
    def ready?
        (Time.now - @time) > Timeout || @data_ready
    end
end

RcvPacketSz = 65536
SndPacketSz = 1200

if LPORT # client

    def main
        lsocket = UDPSocket.new
        lsocket.bind('0.0.0.0', LPORT)
        rsocket = UDPSocket.new
        rsocket.bind('0.0.0.0', 0)
        oport = 100
        loop do
            oaddr = nil
            rs, = select [lsocket, rsocket], nil, nil
            if rs
                if rs.include? lsocket # from zoiper
                    data, _addr = lsocket.recvfrom(RcvPacketSz)
                    oaddr = _addr[3]
                    oport = _addr[1]
                    packet_no = Counter[[oaddr, oport]] += 1
                    chunk_no = 0
                    data_size = data.bytesize
                    cur_pos = 0
                    chunk_no = 0
                    #if false
                    loop do
                        header = Marshal.dump [oaddr, oport, packet_no, chunk_no, data_size, ID]
                        header_sz = header.bytesize
                        chunk_sz_max = SndPacketSz - 4 - header_sz
                        chunk_sz = [chunk_sz_max, data_size - cur_pos].min
                        data_chunk = data[cur_pos, chunk_sz]
                        cur_pos += chunk_sz
                        to_send = [header_sz, chunk_sz].pack('S<S<') + header + data_chunk
                        p [:client_to_server, oaddr, oport, packet_no, chunk_no, data_chunk.md5]
                        REPEAT.times do
                            rsocket.send(to_send, 0, RHOST, RPORT) # client to server
                        end
                        chunk_no += 1
                        break if cur_pos >= data_size
                    end
                    #else
                    #    rsocket.send(data, 0, RHOST, RPORT)
                    #end
                end
                if rs.include? rsocket # from server
                    data, = rsocket.recvfrom(RcvPacketSz)
                    #if true
                    header_sz, chunk_sz = data[0..3].unpack('S<S<')
                    header = data[4, header_sz]
                    oaddr, oport, packet_no, chunk_no, data_size, id = Marshal.load(header) rescue nil
                    next if id != ID
                    tdata = data[4 + header_sz, chunk_sz]
                    ChunkManager.register oaddr, oport, packet_no, chunk_no, data_size, tdata do |td|
                        p [:client_to_zoiper, oaddr, oport, packet_no, chunk_no, td.md5]
                        lsocket.send(td, 0, oaddr, oport) # client to zoiper
                    end
                    #else
                    #    p data.md5
                    #    p data.encoding
                    #    lsocket.send(data, 0, oaddr, oport.to_i)
                    #end
                end
            end
        end
    end

else # server
    class UDPSocket
        def set_pinfo paddr, pport, oaddr, oport, id
            @paddr = paddr
            @pport = pport
            @oaddr = oaddr
            @oport = oport
            @id = id
            self
        end
        attr_reader :paddr, :pport, :oaddr, :oport, :id
    end

    def main
        ssocket = UDPSocket.new
        ssocket.bind('0.0.0.0', SPORT)
        csocketList = {}
        loop do
            rs, = select [ssocket, *csocketList.values], nil, nil
            if rs
                rs.each do |socket|
                    if csocketList.values.include? socket
                        data, _addr = socket.recvfrom(RcvPacketSz) # from asterisk
                        addr = _addr[3]
                        port = _addr[1]
                        packet_no = Counter[[socket.oaddr, socket.oport, socket.id]] += 1
                        chunk_no = 0
                        data_size = data.bytesize
                        cur_pos = 0
                        loop do
                            header = Marshal.dump [socket.oaddr, socket.oport, packet_no, chunk_no, data_size, socket.id]
                            header_sz = header.bytesize
                            chunk_sz_max = SndPacketSz - 4 - header_sz
                            chunk_sz = [chunk_sz_max, data_size - cur_pos].min
                            data_chunk = data[cur_pos, chunk_sz]
                            cur_pos += chunk_sz
                            to_send = [header_sz, chunk_sz].pack('S<S<') + header + data_chunk
                            STDERR.puts  [:server_to_client, socket.oaddr, socket.oport, packet_no, chunk_no, data_chunk.md5].inspect
                            REPEAT.times do
                                ssocket.send(to_send, 0, socket.paddr, socket.pport) # server to client
                            end
                            chunk_no += 1
                            break if cur_pos >= data_size
                        end
                    elsif socket == ssocket
                        data, _addr = ssocket.recvfrom(RcvPacketSz) # from client
                        paddr = _addr[3] # client mobile address
                        pport = _addr[1]
                        header_sz, chunk_sz = data[0..3].unpack('S<S<')
                        header = data[4, header_sz]
                        oaddr, oport, packet_no, chunk_no, data_size, id = Marshal.load(header) rescue nil
                        if id
                            csocket = csocketList[[oaddr, oport, id]]
                            if !csocket
                                s = UDPSocket.new
                                csocketList[[oaddr, oport, id]] = s
                                s.bind('0.0.0.0', 0)
                                s.set_pinfo(paddr, pport, oaddr, oport, id)
                                csocket = s
                            end
                            #STDERR.puts [oaddr, oport, packet_no, chunk_no, data_size].inspect
                            ChunkManager.register oaddr, oport, packet_no, chunk_no, data_size, data[4 + header_sz, chunk_sz] do |tdata|
                                STDERR.puts [:server_to_asterisk, oaddr, oport, packet_no, chunk_no, tdata.md5].inspect
                                csocket.send(tdata, 0, CHOST, CPORT) # server to asterisk
                            #csocket.send(data[4 + header_sz, chunk_sz], 0, CHOST, CPORT) # server to asterisk
                            end
                        end
                    end
                end
            end
        end
    end

end

main


